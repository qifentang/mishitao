#include <graphics.h>
#include<stdlib.h>
#include<stdio.h>
#include<conio.h>
#include<time.h>
#pragma comment(lib,"Winmm.lib")

#define Width 800
#define	High 480

IMAGE img_menu;//菜单图片
IMAGE img_bk;//背景图
IMAGE img_brick;
IMAGE img_ghost1, img_ghost2;//人物
IMAGE img_replace;
IMAGE img_door1;//传送门
IMAGE img_door2;
IMAGE img_over;//结束
IMAGE img_fire1;//火苗
IMAGE img_fire2;
IMAGE img_victory;//胜利

int rec_x, rec_y;	//定义初始位置
int flag;			//判断地图的显示
int wall_x, wall_y;//墙壁坐标
int door_x, door_y;//传送门坐标
int fire_x, fire_y;//火苗坐标
int coordinate[Width / 10][High / 10] = { 0 };	//定义坐标数组
int isSurvival;	//是否存活
double startTime, endTime;//记录开始结束时间
int direction;       //判断撞墙的方向


void start_time()//记录开始时间
{
	startTime = clock();
}
void now_time()//记录现在时间
{
	endTime = clock();
}

void startup()
{
	loadimage(&img_brick, _T("D:\\素材库\\密室逃生\\图片素材\\img_brick.jpg"));//加载砖块
	loadimage(&img_menu, _T("D:\\素材库\\密室逃生\\图片素材\\img_menu.jpg"));//加载菜单页
	loadimage(&img_bk, _T("D:\\素材库\\密室逃生\\图片素材\\img_bk.jpg"));//加载背景
	loadimage(&img_ghost1, _T("D:\\素材库\\密室逃生\\图片素材\\img_ghost1.jpg"));//加载角色
	loadimage(&img_ghost2, _T("D:\\素材库\\密室逃生\\图片素材\\img_ghost2.jpg"));//加载角色
	loadimage(&img_replace, _T("D:\\素材库\\密室逃生\\图片素材\\img_repalce.jpg"));//加载砖块替换图片
	loadimage(&img_door1, _T("D:\\素材库\\密室逃生\\图片素材\\img_door1.jpg"));//加载传送门
	loadimage(&img_door2, _T("D:\\素材库\\密室逃生\\图片素材\\img_door2.jpg"));
	loadimage(&img_over, _T("D:\\素材库\\密室逃生\\图片素材\\img_over.jpg"));
	loadimage(&img_fire1, _T("D:\\素材库\\密室逃生\\图片素材\\img_fire1.jpg"));
	loadimage(&img_fire2, _T("D:\\素材库\\密室逃生\\图片素材\\img_fire2.jpg"));
	loadimage(&img_victory, _T("D:\\素材库\\密室逃生\\图片素材\\img_victory.jpg"));
	isSurvival = 1;
}

void Survival()
{
	if (rec_x > 0 && rec_x < Width&&rec_y>0 && rec_y < High)
	{
		if (coordinate[rec_x / 10][rec_y / 10] == 2)
		{
			isSurvival = 0;
		}
	}
	else
		isSurvival = 0;
}

void map1()
{
	rec_x = Width / 2;
	rec_y = High / 2;

	//设置障碍物位置
	for (wall_x = 0; wall_x <= Width / 10; wall_x++)
		for (wall_y = 0; wall_y <= High / 10; wall_y++)
		{
			if (wall_x == 10 && wall_y == 24)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 10 && wall_y == 22)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 12 && wall_y == 4)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 14 && wall_y == 4)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 42 && wall_y == 24)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 42 && wall_y == 26)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 40 && wall_y == 26)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 38 && wall_y == 26)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 44 && wall_y == 26)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 50 && wall_y == 6)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 48 && wall_y == 40)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 20 && wall_y == 38)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 22 && wall_y == 12)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 60 && wall_y == 12)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 60 && wall_y == 14)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 60 && wall_y == 16)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 60 && wall_y == 26)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 58 && wall_y == 26)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 56 && wall_y == 26)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 44 && wall_y == 24)
			{
				coordinate[wall_x][wall_y] = 3;
				door_x = wall_x * 10;
				door_y = wall_y * 10;
			}
		}
}

void map2()
{
	initgraph(Width, High);
	putimage(0, 0, &img_bk);
	putimage(rec_x, rec_y, &img_ghost1, NOTSRCERASE); // 显示正常角色
	putimage(rec_x, rec_y, &img_ghost2, SRCINVERT);

	for (wall_x = 0; wall_x <= Width / 10; wall_x++)
		for (wall_y = 0; wall_y <= High / 10; wall_y++)
			coordinate[wall_x][wall_y] = 0;
	rec_x = 120;
	rec_y = 360;
	//设置障碍物位置
	for (wall_x = 0; wall_x <= Width / 10; wall_x++)
		for (wall_y = 0; wall_y <= High / 10; wall_y++)
		{
			if (wall_x == 6 && wall_y == 4)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 8 && wall_y == 4)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 10 && wall_y == 4)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 12 && wall_y == 4)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 14 && wall_y == 4)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 6 && wall_y == 6)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 6 && wall_y == 8)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 6 && wall_y == 10)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 12 && wall_y == 8)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 18 && wall_y == 6)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 58 && wall_y == 2)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 66 && wall_y == 2)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 68 && wall_y == 10)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 14 && wall_y == 26)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 16 && wall_y == 20)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 16 && wall_y == 38)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 18 && wall_y == 28)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 24 && wall_y == 16)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 26 && wall_y == 16)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 26 && wall_y == 18)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 26 && wall_y == 20)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 26 && wall_y == 22)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 24 && wall_y == 22)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 14 && wall_y == 40)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 52 && wall_y == 26)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 50 && wall_y == 34)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 60 && wall_y == 28)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 66 && wall_y == 36)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 58 && wall_y == 42)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			//设置火花位置
			else if (wall_x == 10 && wall_y == 8)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			else if (wall_x == 10 && wall_y == 10)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			else if (wall_x == 10 && wall_y == 12)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			else if (wall_x == 14 && wall_y == 36)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			else if (wall_x == 14 && wall_y == 34)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			else if (wall_x == 14 && wall_y == 38)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			else if (wall_x == 50 && wall_y == 38)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			else if (wall_x == 52 && wall_y == 38)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			else if (wall_x == 54 && wall_y == 38)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			else if (wall_x == 56 && wall_y == 38)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			else if (wall_x == 58 && wall_y == 38)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			else if (wall_x == 60 && wall_y == 38)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			else if (wall_x == 62 && wall_y == 28)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			else if (wall_x == 64 && wall_y == 28)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			else if (wall_x == 68 && wall_y == 28)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			else if (wall_x == 70 && wall_y == 28)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			else if (wall_x == 66 && wall_y == 6)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			else if (wall_x == 68 && wall_y == 6)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			else if (wall_x == 64 && wall_y == 6)
			{
				coordinate[wall_x][wall_y] = 2;
			}
			//设置传送门
			else if (wall_x == 16 && wall_y == 36)
			{
				coordinate[wall_x][wall_y] = 3;
				door_x = wall_x * 10;
				door_y = wall_y * 10;
			}
		}
}
void map3()
{
	initgraph(Width, High);

	putimage(0, 0, &img_bk);
	putimage(rec_x, rec_y, &img_ghost1, NOTSRCERASE); // 显示正常角色
	putimage(rec_x, rec_y, &img_ghost2, SRCINVERT);

	for (wall_x = 0; wall_x <= Width / 10; wall_x++)
		for (wall_y = 0; wall_y <= High / 10; wall_y++)
			coordinate[wall_x][wall_y] = 0;
	rec_x = 380;
	rec_y = 220;
	for (wall_x = 0; wall_x <= Width / 10; wall_x++)
		for (wall_y = 0; wall_y <= High / 10; wall_y++)
		{
			if (wall_x == 2 && wall_y == 24)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 4 && wall_y == 22)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 4 && wall_y == 24)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 4 && wall_y == 26)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 6 && wall_y == 24)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 16 && wall_y == 22)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 14 && wall_y == 20)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 16 && wall_y == 20)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 16 && wall_y == 18)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 18 && wall_y == 20)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 20 && wall_y == 12)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 18 && wall_y == 10)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 20 && wall_y == 10)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 22 && wall_y == 10)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 20 && wall_y == 8)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 22 && wall_y == 2)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 24 && wall_y == 0)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 24 && wall_y == 2)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 24 && wall_y == 4)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 26 && wall_y == 2)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 34 && wall_y == 8)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 36 && wall_y == 6)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 36 && wall_y == 8)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 36 && wall_y == 10)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 38 && wall_y == 8)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 42 && wall_y == 24)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 40 && wall_y == 26)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 42 && wall_y == 26)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 42 && wall_y == 28)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 44 && wall_y == 26)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 8 && wall_y == 42)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 10 && wall_y == 40)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 10 && wall_y == 42)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 10 && wall_y == 44)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 12 && wall_y == 42)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 18 && wall_y == 32)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 20 && wall_y == 30)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 20 && wall_y == 32)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 20 && wall_y == 34)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 22 && wall_y == 32)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 28 && wall_y == 40)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 30 && wall_y == 38)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 30 && wall_y == 40)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 30 && wall_y == 42)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 32 && wall_y == 40)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 34 && wall_y == 22)
			{
				coordinate[wall_x][wall_y] = 1;
			}

			else if (wall_x == 38 && wall_y == 44)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 40 && wall_y == 42)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 40 && wall_y == 44)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 40 && wall_y == 46)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 42 && wall_y == 44)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 50 && wall_y == 42)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 52 && wall_y == 42)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 54 && wall_y == 42)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 52 && wall_y == 40)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 52 && wall_y == 44)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 54 && wall_y == 34)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 56 && wall_y == 34)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 58 && wall_y == 34)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 56 && wall_y == 32)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 56 && wall_y == 36)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 54 && wall_y == 6)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 56 && wall_y == 6)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 58 && wall_y == 6)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 56 && wall_y == 4)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 56 && wall_y == 8)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 62 && wall_y == 8)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 64 && wall_y == 8)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 66 && wall_y == 8)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 64 && wall_y == 6)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 64 && wall_y == 10)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 62 && wall_y == 20)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 62 && wall_y == 22)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 62 && wall_y == 24)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 60 && wall_y == 22)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			else if (wall_x == 64 && wall_y == 22)
			{
				coordinate[wall_x][wall_y] = 1;
			}
			//设置传送门
			if (wall_x == 8 && wall_y == 40)
			{
				coordinate[wall_x][wall_y] = 3;
				door_x = wall_x * 10;
				door_y = wall_y * 10;
			}
		}

}

void victory()
{
	rec_x = Width / 2;
	rec_y = High / 2;

	putimage(0, 0, &img_victory);//插进死亡图片


	outtextxy(rec_x - 30, rec_y + Width / 6 + 10, "空格查看时间");
	now_time();
	printf("您总共花了%.2lf s！\n", (endTime - startTime) / 1000.0);

	EndBatchDraw();//关闭画面
	_getch();
	closegraph();
}

void gameover()
{
	mciSendString(("close bkmusic"), NULL, 0, NULL); // 先把前面一次的音乐关闭
	mciSendString(("open D:\\素材库\\密室逃生\\音效素材\\death_music.mp3 alias deathmusic"), NULL, 0, NULL); // 打开跳动音乐
	mciSendString(("play deathmusic"), NULL, 0, NULL); // 仅播放一次

	rec_x = Width / 2;
	rec_y = High / 2;

	putimage(0, 0, &img_over);
	outtextxy(rec_x - 30, rec_y + Width / 6 + 10, "空格查看时间");
	now_time();
	printf("您总共花了%.2lf s！\n", (endTime - startTime) / 1000.0);

	EndBatchDraw();
	_getch();
	closegraph();
}

void begin()
{
	rec_x = Width / 2;
	rec_y = High / 2;

	mciSendString("open D:\\素材库\\密室逃生\\音效素材\\bk_music.mp3 alias bkmusic", NULL, 0, NULL);//背景音乐
	mciSendString(("play bkmusic repeat"), NULL, 0, NULL);  // 循环播放
	char space;
	initgraph(Width, High);
	putimage(0, 0, &img_menu);
	outtextxy(rec_x - 30, rec_y + Width / 6, "空格开始");

	while (true)
	{
		if (_kbhit())
		{
			space = _getch();
			if (space == ' ')
			{
				start_time();
				rec_x = Width / 2;
				rec_y = High / 2;
				putimage(0, 0, &img_bk);
				flag = 1;
				break;
			}
		}
	}
}

void show()
{
	putimage(0, 0, &img_bk);
	putimage(rec_x, rec_y, &img_ghost1, NOTSRCERASE); // 显示正常角色
	putimage(rec_x, rec_y, &img_ghost2, SRCINVERT);

	Survival();
	if (isSurvival == 1)
	{
		for (wall_x = 0; wall_x <= Width / 10; wall_x++)
			for (wall_y = 0; wall_y <= High / 10; wall_y++)
			{
				if (coordinate[wall_x][wall_y] == 1)
				{
					//输出障碍物
					putimage(wall_x * 10, wall_y * 10, &img_brick);
				}
				if (coordinate[wall_x][wall_y] == 2)
				{
					//输出火花
					putimage(wall_x * 10, wall_y * 10, &img_fire1, NOTSRCERASE); // 显示火花
					putimage(wall_x * 10, wall_y * 10, &img_fire2, SRCINVERT);
				}
				if (coordinate[wall_x][wall_y] == 3)
				{
					//输出传送门
					putimage(wall_x * 10, wall_y * 10, &img_door1, NOTSRCERASE); // 显示传送门
					putimage(wall_x * 10, wall_y * 10, &img_door2, SRCINVERT);
				}
			}
	}
	else
		gameover();
}


void map()
{
	BeginBatchDraw();
	if (flag == 1)
	{
		map1();
		show();
	}
	else if (flag == 2)
	{

		map2();
		show();
	}
	else if (flag == 3)
	{
		map3();
		show();
	}
	else if (flag == 4)
	{
		victory();
	}
	FlushBatchDraw();
}

void isflag()
{
	if (door_x == rec_x && door_y == rec_y)
	{
		flag += 1;
		map();
	}
}

void updateWithoutInput()
{
	isflag();
	int i;

	if (isSurvival == 1)
	{
		//碰撞弹性效果
		if (coordinate[rec_x / 10][rec_y / 10 - 2] == 1 && direction == 1)//向上
		{
			mciSendString(("close collisionmusic"), NULL, 0, NULL); // 先把前面一次的音乐关闭
			mciSendString(("open D:\\素材库\\密室逃生\\音效素材\\collision_music.mp3 alias collisionmusic"), NULL, 0, NULL); // 打开跳动音乐
			mciSendString(("play collisionmusic"), NULL, 0, NULL); // 仅播放一次

			wall_x = rec_x;
			wall_y = rec_y - 20;
			for (i = 0; i < 4; i++)
			{
				BeginBatchDraw();
				putimage(wall_x, wall_y, &img_replace);
				wall_y--;

				putimage(wall_x, wall_y, &img_brick);
				FlushBatchDraw();
				Sleep(30);
			}
			for (i = 0; i < 4; i++)
			{
				BeginBatchDraw();
				putimage(wall_x, wall_y, &img_replace);
				wall_y++;
				putimage(wall_x, wall_y, &img_brick);
				FlushBatchDraw();
				Sleep(30);
			}
		}
		else if (coordinate[rec_x / 10 - 2][rec_y / 10] == 1 && direction == 3)//向左
		{
			mciSendString(("close collisionmusic"), NULL, 0, NULL); // 先把前面一次的音乐关闭
			mciSendString(("open D:\\素材库\\密室逃生\\音效素材\\collision_music.mp3 alias collisionmusic"), NULL, 0, NULL); // 打开跳动音乐
			mciSendString(("play collisionmusic"), NULL, 0, NULL); // 仅播放一次

			wall_x = rec_x - 20;
			wall_y = rec_y;
			for (i = 0; i < 4; i++)
			{
				BeginBatchDraw();
				putimage(wall_x, wall_y, &img_replace);
				wall_x--;

				putimage(wall_x, wall_y, &img_brick);
				Sleep(30);
				FlushBatchDraw();

			}
			for (i = 0; i < 4; i++)
			{
				BeginBatchDraw();
				putimage(wall_x, wall_y, &img_replace);
				wall_x++;

				putimage(wall_x, wall_y, &img_brick);
				Sleep(30);
				FlushBatchDraw();

			}
		}
		else if (coordinate[rec_x / 10 + 2][rec_y / 10] == 1 && direction == 4)//向右
		{
			mciSendString(("close collisionmusic"), NULL, 0, NULL); // 先把前面一次的音乐关闭
			mciSendString(("open D:\\素材库\\密室逃生\\音效素材\\collision_music.mp3 alias collisionmusic"), NULL, 0, NULL); // 打开跳动音乐
			mciSendString(("play collisionmusic"), NULL, 0, NULL); // 仅播放一次

			wall_x = rec_x + 20;
			wall_y = rec_y;
			for (i = 0; i < 4; i++)
			{
				BeginBatchDraw();
				putimage(wall_x, wall_y, &img_replace);
				wall_x++;

				putimage(wall_x, wall_y, &img_brick);
				FlushBatchDraw();
				Sleep(30);
			}
			for (i = 0; i < 4; i++)
			{
				BeginBatchDraw();
				putimage(wall_x, wall_y, &img_replace);
				wall_x--;

				putimage(wall_x, wall_y, &img_brick);
				FlushBatchDraw();
				Sleep(30);
			}
		}
		else if (coordinate[rec_x / 10][rec_y / 10 + 2] == 1 && direction == 2)//向下
		{
			mciSendString(("close collisionmusic"), NULL, 0, NULL); // 先把前面一次的音乐关闭
			mciSendString(("open D:\\素材库\\密室逃生\\音效素材\\collision_music.mp3 alias collisionmusic"), NULL, 0, NULL); // 打开跳动音乐
			mciSendString(("play collisionmusic"), NULL, 0, NULL); // 仅播放一次
			wall_x = rec_x;
			wall_y = rec_y + 20;
			for (i = 0; i < 4; i++)
			{
				BeginBatchDraw();

				putimage(wall_x, wall_y, &img_replace);
				wall_y++;
				putimage(wall_x, wall_y, &img_brick);
				FlushBatchDraw();

				Sleep(30);
			}
			for (i = 0; i < 4; i++)
			{
				BeginBatchDraw();

				putimage(wall_x, wall_y, &img_replace);
				wall_y--;
				putimage(wall_x, wall_y, &img_brick);
				FlushBatchDraw();

				Sleep(30);
			}
		}
	}
}

void updateWithInput()
{
	char input;
	while (isSurvival)
	{
		if (_kbhit())	//判断是否有输入
		{
			input = _getch();

			//向某个方向移动
			if (input == 'w')
			{
				while (coordinate[rec_x / 10][rec_y / 10 - 1] != 1)
				{
					if (isSurvival == 1)
					{
						BeginBatchDraw();
						putimage(0, 0, &img_bk);
						rec_y--;

						show();  //显示画面
						putimage(rec_x, rec_y, &img_ghost1, NOTSRCERASE); // 显示正常角色
						putimage(rec_x, rec_y, &img_ghost2, SRCINVERT);
						FlushBatchDraw();
						Sleep(0.5);
					}
				}
				rec_y = rec_y + 1;
				direction = 1;
				updateWithoutInput();
			}
			if (input == 'a')
			{
				while (coordinate[rec_x / 10 - 1][rec_y / 10] != 1)
				{
					if (isSurvival == 1)
					{
						BeginBatchDraw();
						putimage(0, 0, &img_bk);
						rec_x--;
						show();  //显示画面
						putimage(rec_x, rec_y, &img_ghost1, NOTSRCERASE); // 显示正常角色
						putimage(rec_x, rec_y, &img_ghost2, SRCINVERT);


						FlushBatchDraw();
						Sleep(0.5);
					}
				}
				rec_x = rec_x + 1;
				direction = 3;
				updateWithoutInput();
			}
			if (input == 's')
			{
				while (coordinate[rec_x / 10][rec_y / 10 + 2] != 1)
				{
					if (isSurvival == 1)
					{
						BeginBatchDraw();
						putimage(0, 0, &img_bk);
						rec_y++;

						show();  //显示画面
						putimage(rec_x, rec_y, &img_ghost1, NOTSRCERASE); // 显示正常角色
						putimage(rec_x, rec_y, &img_ghost2, SRCINVERT);

						FlushBatchDraw();
						Sleep(0.5);
					}
				}
				direction = 2;
				updateWithoutInput();
			}
			if (input == 'd')
			{
				while (coordinate[rec_x / 10 + 2][rec_y / 10] != 1)
				{
					if (isSurvival == 1)
					{
						BeginBatchDraw();
						putimage(0, 0, &img_bk);
						rec_x++;

						show();  //显示画面
						putimage(rec_x, rec_y, &img_ghost1, NOTSRCERASE); // 显示正常角色
						putimage(rec_x, rec_y, &img_ghost2, SRCINVERT);
						FlushBatchDraw();
						Sleep(0.5);
					}
				}
				direction = 4;
				updateWithoutInput();
			}
		}
	}
}


int main()
{
	startup();	//数据初始化
	begin();	//开始函数
	map();	    //显示地图
	while (1)   //游戏循环执行
	{
		updateWithInput();     // 与用户输入有关的更新
		updateWithoutInput();	//与用户输入无关的更新
	}
	return 0;
}
